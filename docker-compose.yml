services:
  transactions:
    build:
      context: .
      dockerfile: ./apps/transactions/Dockerfile
      target: development
    restart: unless-stopped
    container_name: transactions
    hostname: transactions
    command: npm run start:dev transactions
    environment:
      TZ: "Asia/Jakarta"
    env_file:
      - ./apps/.env
    depends_on:
      - mongodb-primary
      - mongodb-secondary
      - mongodb-arbiter
      - rabbitmq
      - cashbacks
      - rewards
      - partners
      - notifications
      - wallets
      - auth
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '3000:3000'

  cashbacks:
    build:
      context: .
      dockerfile: ./apps/cashbacks/Dockerfile
      target: development
    restart: unless-stopped
    container_name: cashbacks
    hostname: cashbacks
    command: npm run start:dev cashbacks
    environment:
      TZ: "Asia/Jakarta"
    env_file:
      - ./apps/.env
    depends_on:
      - mongodb-primary
      - mongodb-secondary
      - mongodb-arbiter
      - auth
      - rabbitmq
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '3001:3001'

  rewards:
    build:
      context: .
      dockerfile: ./apps/rewards/Dockerfile
      target: development
    restart: unless-stopped
    container_name: rewards
    hostname: rewards
    command: npm run start:dev rewards
    environment:
      TZ: "Asia/Jakarta"
    env_file:
      - ./apps/.env
    depends_on:
      - mongodb-primary
      - mongodb-secondary
      - mongodb-arbiter
      - auth
      - rabbitmq
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '3002:3002'

  partners:
    build:
      context: .
      dockerfile: ./apps/partners/Dockerfile
      target: development
    restart: unless-stopped
    container_name: partners
    hostname: partners
    command: npm run start:dev partners
    environment:
      TZ: "Asia/Jakarta"
    env_file:
      - ./apps/.env
    depends_on:
      - mongodb-primary
      - mongodb-secondary
      - mongodb-arbiter
      - auth
      - rabbitmq
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '3003:3003'

  notifications:
    build:
      context: .
      dockerfile: ./apps/notifications/Dockerfile
      target: development
    restart: unless-stopped
    container_name: notifications
    hostname: notifications
    command: npm run start:dev notifications
    environment:
      TZ: "Asia/Jakarta"
    env_file:
      - ./apps/.env
    depends_on:
      - auth
      - rabbitmq
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules

  wallets:
    build:
      context: .
      dockerfile: ./apps/wallets/Dockerfile
      target: development
    restart: unless-stopped
    container_name: wallets
    hostname: wallets
    command: npm run start:dev wallets
    environment:
      TZ: "Asia/Jakarta"
    env_file:
      - ./apps/.env
    depends_on:
      - mongodb-primary
      - mongodb-secondary
      - mongodb-arbiter
      - auth
      - rabbitmq
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '3004:3004'

  auth:
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
      target: development
    restart: unless-stopped
    container_name: auth
    hostname: auth
    command: npm run start:dev auth
    environment:
      TZ: "Asia/Jakarta"
    env_file:
      - ./apps/.env
    depends_on:
      - mongodb-primary
      - mongodb-secondary
      - mongodb-arbiter
      - rabbitmq
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '3005:3005'

  rabbitmq:
    image: rabbitmq
    restart: on-failure
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - '5672:5672'

  mongodb-primary:
    image: bitnami/mongodb:latest
    restart: on-failure
    container_name: mongodb-primary
    hostname: mongodb-primary
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-primary
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_ROOT_PASSWORD=superuser
      - MONGODB_DATABASE=kezbekapp
      - MONGODB_REPLICA_SET_KEY=replicasetkey1212
    volumes:
      - 'mongodb_master_data:/bitnami'
      - ./docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - '27017:27017'

  mongodb-secondary:
    image: bitnami/mongodb:latest
    restart: on-failure
    container_name: mongodb-secondary
    hostname: mongodb-secondary
    depends_on:
      - mongodb-primary
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-secondary
      - MONGODB_REPLICA_SET_MODE=secondary
      - MONGODB_INITIAL_PRIMARY_HOST=mongodb-primary
      - MONGODB_INITIAL_PRIMARY_PORT_NUMBER=27017
      - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=superuser
      - MONGODB_REPLICA_SET_KEY=replicasetkey1212

  mongodb-arbiter:
    image: bitnami/mongodb:latest
    restart: on-failure
    container_name: mongodb-arbiter
    hostname: mongodb-arbiter
    depends_on:
      - mongodb-primary
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-arbiter
      - MONGODB_REPLICA_SET_MODE=arbiter
      - MONGODB_INITIAL_PRIMARY_HOST=mongodb-primary
      - MONGODB_INITIAL_PRIMARY_PORT_NUMBER=27017
      - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=superuser
      - MONGODB_REPLICA_SET_KEY=replicasetkey1212

volumes:
  mongodb_master_data:
    driver: local